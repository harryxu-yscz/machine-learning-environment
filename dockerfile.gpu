FROM nvidia/cuda:8.0-devel-ubuntu16.04
ARG PYTHON_VERSION=3.5
ARG NB_USER=ubuntu 
ENV OPENCV_DIR /opt/opencv 
ENV CAFFE_ROOT /opt/caffe
ENV LIBGPUARRAY_DIR /opt/libgpuarray
ENV NUM_CORES 8 
ENV NB_UID 1000 
ENV CUDNN_VERSION 6.0.21
ARG CLONE_TAG=1.0
ENV PYCAFFE_ROOT $CAFFE_ROOT/python
ENV PYTHONPATH $PYCAFFE_ROOT:$PYTHONPATH
ENV PATH $CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH

LABEL maintainer "Pierre-Luc Delisle <pierre-luc.delisle.1@ens.etsmtl.ca>"
LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"
LABEL com.nvidia.caffe.version="0.15"

RUN echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list

RUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER

RUN apt-get update && apt-get install -y --no-install-recommends \
            libcudnn6=$CUDNN_VERSION-1+cuda8.0 \
            libcudnn6-dev=$CUDNN_VERSION-1+cuda8.0 \
            ca-certificates \
		    build-essential \
			apt-utils \ 
			cmake \
			git \
			libgtk2.0-dev \ 
			pkg-config \
			libavcodec-dev \
			libavformat-dev \
			libswscale-dev \
			wget \
			libhdf5-dev \
			g++ \
			graphviz \
			vim \
			nano \
			unzip \
			libtbb2 \
			libtbb-dev \
			libjpeg-dev \
			libpng-dev \
			libtiff-dev \
			libjasper-dev \
			libdc1394-22-dev \ 
			libv4l-dev \
			libgtk-3-dev \
			libatlas-base-dev \ 
			gfortran \
			openblas-* \
			libeigen3-dev \  
			ocl-icd-opencl-dev \ 
			python3-dev \
			python3-tk \
			python3-numpy \
			python3-scipy \
			python3-nose \
			python3-h5py \
			python3-skimage \
			python3-matplotlib \
			python3-pandas \
			python3-sklearn \
			python3-sympy \
			libcupti-dev \
			libgtkglext1* \
			freeglut3* \
			libgl1-mesa-dev \
			mesa-common-dev \
			libprotobuf-dev \
			libleveldb-dev \
			libsnappy-dev \
			libopencv-dev \ 
			libhdf5-serial-dev \
			protobuf-compiler \
			libboost-* \
			libatlas-base-dev \
			libopenblas-dev \ 
			openblas* \
			libgstreamer* \
			libfaac-dev \
			libopencore-amrnb-dev \ 
			libopencore-amrwb-dev \ 
			libtheora-dev \
			libvorbis-dev \
			libxvidcore-dev \
			x264 \
			v4l-utils \
			liblapacke-dev \
			doxygen \
			libopenni2* \
			libgphoto2* \
			libgflags-dev \
			libgoogle-glog-dev \
			python-dev \
        	python-numpy \
        	python-pip \
        	python-setuptools \
        	python-scipy \
			liblmdb-dev && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists/* 

RUN	wget https://bootstrap.pypa.io/get-pip.py && \ 
	python3 get-pip.py && \ 
	pip3 install numpy \
				 virtualenv \
				 virtualenvwrapper \
				 boost \
				 pytest && \
	pip install numpy \ 
			 	virtualenv \
				virtualenvwrapper \
				boost \
				pytest

RUN	mkdir -p /src && \
	mkdir -p $CAFFE_ROOT && \
	cd $CAFFE_ROOT && \
	git clone -b ${CLONE_TAG} --depth 1 https://github.com/BVLC/caffe.git . && \
    pip install --upgrade pip && \
    cd python && \
    for req in $(cat requirements.txt) pydot; do pip install $req; done && \
    cd .. && \
    git clone https://github.com/NVIDIA/nccl.git && cd nccl && make -j install && \
    cd .. && \
    rm -rf nccl && \
    mkdir build && cd build && \
    cmake \
    	-D USE_CUDNN=1 \
    	-D USE_NCCL=1 \
    	-D BLAS=open \
    	-D USE_OPENCV=ON .. && \
    make -j"$(nproc)" all && \
    make pycaffe && \
	make test && \ 
	make install && \
	echo "$CAFFE_ROOT/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig && \
	rm -rf $CAFFE_ROOT

RUN	cd /src && \
	mkdir -p $OPENCV_DIR && \
	wget https://github.com/opencv/opencv/archive/3.3.0.zip && \
	unzip 3.3.0.zip && \ 
	mv /src/opencv-3.3.0/ $OPENCV_DIR/ && \ 
	rm -rf /src/3.3.0.zip && \
	wget https://github.com/opencv/opencv_contrib/archive/3.3.0.zip -O 3.3.0-contrib.zip && \
	unzip 3.3.0-contrib.zip && \
	mv /src/opencv_contrib-3.3.0 $OPENCV_DIR/ && \ 
	rm -rf /src/3.3.0-contrib.zip && \ 
	mkdir -p $OPENCV_DIR/opencv-3.3.0/build && \
	cd $OPENCV_DIR/opencv-3.3.0/build && \ 
	cmake \
	-D CMAKE_BUILD_TYPE=RELEASE \
	-D BUILD_PYTHON_SUPPORT=ON \
	-D CMAKE_INSTALL_PREFIX=/usr/local \
	-D CUDA_CUDA_LIBRARY=/usr/local/cuda/lib64/stubs/libcuda.so \
	-D INSTALL_C_EXAMPLES=ON \
	-D INSTALL_PYTHON_EXAMPLES=ON \
	-D BUILD_PYTHON_SUPPORT=ON \
	-D BUILD_NEW_PYTHON_SUPPORT=ON \
	-D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \
	-D PYTHON_INCLUDE_DIR=/usr/include/python3.5 \
	-D PYTHON_INCLUDE_DIR2=/usr/include/x86_64-linux-gnu/python3.5m \
	-D PYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.5m.so \
	-D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.5/dist-packages/numpy/core/include/ \
	-D OPENCV_EXTRA_MODULES_PATH=$OPENCV_DIR/opencv_contrib-3.3.0/modules \
	-D WITH_TBB=ON \
	-D WITH_PTHREADS_PF=ON \
	-D WITH_OPENNI=OFF \
	-D WITH_OPENNI2=ON \
	-D WITH_EIGEN=ON \
	-D BUILD_DOCS=ON \
	-D BUILD_TESTS=ON \
	-D BUILD_PERF_TESTS=ON \
	-D BUILD_EXAMPLES=ON \
	-D WITH_OPENCL=ON \
	-D WITH_CUDA=ON \
	-D WITH_CUBLAS=ON \
	-D WITH_V4L=ON \
	-D USE_GStreamer=ON \
	-D WITH_GDAL=ON \
	-D WITH_CSTRIPES=ON \
	-D WITH_NVCUVID=ON \
	-D ENABLE_FAST_MATH=1 \
	-D CUDA_FAST_MATH=1 \
	-D BUILD_opencv_gpu=ON \
	-D BUILD_opencv_gpuarithm=ON \
	-D BUILD_opencv_gpubgsegm=ON \
	-D BUILD_opencv_gpucodec=ON \
	-D BUILD_opencv_gpufeatures2d=ON \
	-D BUILD_opencv_gpufilters=ON \
	-D BUILD_opencv_gpuimgproc=ON \
	-D BUILD_opencv_gpulegacy=ON \
	-D BUILD_opencv_gpuoptflow=ON \
	-D BUILD_opencv_gpustereo=ON \
	-D BUILD_opencv_gpuwarping=ON \
	-D WITH_OPENGL=ON \
	-D WITH_QT=OFF \
	-D WITH_IPP=ON \
	-D WITH_V4L=ON .. && \
	make -j8 && \
	make install && \
	ldconfig && \
	rm -rf $OPENCV_DIR

RUN	cd /home/ubuntu && \
	pip3 install virtualenv && \
	virtualenv -p python3 ml_venv && \
	. ml_venv/bin/activate && \
	ln -s /usr/local/lib/python3.5/dist-packages/cv2.cpython-35m-x86_64-linux-gnu.so /home/ubuntu/ml_venv/lib/python3.5/site-packages/ && \
	pip3 install --upgrade --force-reinstall numpy \
				 protobuf \
				 Pillow \
				 future \
				 graphviz \
				 joblib \
				 matplotlib \
				 theano \
				 cython \
				 scikit-learn \
				 scikit-image \
				 scipy \
				 tensorflow-gpu \
				 tensorflow-tensorboard==0.1.8 \
				 tflearn \
				 keras \
				 jupyter \
				 sphinx \
				 wheel \
				 boost \
				 pytest \
				 http://download.pytorch.org/whl/cu80/torch-0.2.0.post3-cp35-cp35m-manylinux1_x86_64.whl && \
	pip3 install torchvision

RUN mkdir $LIBGPUARRAY_DIR/ && \
	cd /src && \
	pip3 install Mako && \
	git clone https://github.com/Theano/libgpuarray.git && \
	mv libgpuarray $LIBGPUARRAY_DIR/ && \
	cd $LIBGPUARRAY_DIR/libgpuarray && \
	mkdir Build && \
	cd Build && \
	cmake \
	-D CMAKE_BUILD_TYPE=Release .. && \
	make && \
	make install && \
	rm -rf $LIBGPUARRAY_DIR && \
	cd /

USER $NB_USER

EXPOSE 6006 

WORKDIR /

CMD ["/bin/bash"]